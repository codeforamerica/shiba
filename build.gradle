plugins {
    id("org.springframework.boot") version "2.6.2"
    id("io.spring.dependency-management") version "1.0.11.RELEASE"
    id("java")
    id("com.github.jk1.dependency-license-report") version "2.0"
    id("com.gorylenko.gradle-git-properties") version "2.3.2"
}

group = "org.codeforamerica"
version = "0.0.1-SNAPSHOT"
sourceCompatibility = "16"

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
    developmentOnly
    runtimeClasspath {
        extendsFrom developmentOnly
    }
    jaxb
}

repositories {
    mavenCentral()
}

task genJaxbFilenet {
    ext.sourcesDir = "${buildDir}/generated-sources/jaxbFilenet"
    ext.classesDir = "${buildDir}/classes/jaxb"
    ext.schema = "src/main/resources/FileNetService.wsdl"

    outputs.dir classesDir

    doLast() {
        project.ant {
            taskdef name: "xjc", classname: "com.sun.tools.xjc.XJCTask",
                    classpath: configurations.jaxb.asPath
            mkdir(dir: sourcesDir)
            mkdir(dir: classesDir)

            xjc(destdir: sourcesDir, schema: schema,
                    package: "org.codeforamerica.shiba.filenetwsdl") {
                arg(value: "-wsdl")
                arg(value: "-extension")
                produces(dir: sourcesDir, includes: "**/*.java")
            }

            javac(destdir: classesDir, source: 1.8, target: 1.8, debug: true,
                    debugLevel: "lines,vars,source",
                    includeantruntime: false,
                    classpath: configurations.jaxb.asPath) {
                src(path: sourcesDir)
                include(name: "**/*.java")
                include(name: "*.java")
            }

            copy(todir: classesDir) {
                fileset(dir: sourcesDir, erroronmissingdir: false) {
                    exclude(name: "**/*.java")
                }
            }
        }
    }
}

dependencyManagement {
    imports {
        mavenBom("org.springframework.session:spring-session-bom:2021.1.1")
    }
}

dependencies {
    modules {
        module("javax.activation:activation") {
            replacedBy("jakarta.activation:jakarta.activation-api", "Use jakarta instead of javax")
        }
        module("org.apache.commons:commons-email") {
            replacedBy("com.sun.mail:jakarta.mail", "Use jakarta instead of apache")
        }
    }

    implementation(files(genJaxbFilenet.classesDir).builtBy(genJaxbFilenet))
    jaxb(
            'org.glassfish.jaxb:jaxb-runtime',
            'org.glassfish.jaxb:jaxb-xjc',
            'org.glassfish.jaxb:jaxb-jxc'
    )

    compileOnly("org.projectlombok:lombok")
    developmentOnly("org.springframework.boot:spring-boot-devtools")
    annotationProcessor("org.projectlombok:lombok")
    annotationProcessor("org.springframework.boot:spring-boot-configuration-processor")

    implementation("org.springframework.session:spring-session-jdbc")
    implementation("io.sentry:sentry-spring-boot-starter:5.5.2")
    implementation("org.springframework.boot:spring-boot-starter-thymeleaf")
    implementation("org.apache.logging.log4j:log4j-api:2.17.1")
    implementation("org.apache.logging.log4j:log4j-to-slf4j:2.17.1")
    implementation("org.springframework.boot:spring-boot-starter-web")
    implementation("org.springframework.boot:spring-boot-starter-web-services") {
        exclude(group: "org.springframework.boot", module: "spring-boot-starter-tomcat")
    }

    implementation("com.azure:azure-storage-blob:12.14.2")
    implementation("org.postgresql:postgresql")
    implementation("org.glassfish.jaxb:jaxb-runtime")
    implementation("org.apache.pdfbox:pdfbox:2.0.25")
    implementation("org.apache.commons:commons-lang3")
    implementation("org.apache.commons:commons-text:1.9")
    implementation("org.jetbrains:annotations:23.0.0")
    implementation("commons-validator:commons-validator:1.7")
    implementation("org.springframework.boot:spring-boot-starter-data-jdbc")
    implementation("org.apache.httpcomponents:httpclient")
    implementation("io.sentry:sentry-logback:5.5.2")
    implementation("org.springframework.boot:spring-boot-starter-security")
    implementation("org.springframework.boot:spring-boot-starter-oauth2-client")
    implementation("com.google.crypto.tink:tink:1.6.1")
    implementation("org.flywaydb:flyway-core:8.3.0")
    implementation("org.springframework.boot:spring-boot-starter-webflux")
    implementation("com.mixpanel:mixpanel-java:1.5.0")
    implementation("org.springframework.boot:spring-boot-starter-validation")
    implementation("com.sun.activation:jakarta.activation")
    implementation("org.apache.commons:commons-email:1.5")
    implementation("org.springframework:spring-aspects")
    implementation("com.google.code.findbugs:jsr305:3.0.2")
    implementation("org.springframework.retry:spring-retry")
    implementation("ch.qos.logback.contrib:logback-json-classic:0.1.5")
    implementation("ch.qos.logback.contrib:logback-jackson:0.1.5")
    implementation("ch.qos.logback:logback-core:1.2.0")
    implementation("ch.qos.logback:logback-classic:1.2.0")
    implementation("net.logstash.logback:logstash-logback-encoder:7.0.1")
    implementation("net.javacrumbs.shedlock:shedlock-spring:4.30.0")
    implementation("net.javacrumbs.shedlock:shedlock-provider-jdbc-template:4.30.0")
    implementation("org.apache.chemistry.opencmis:chemistry-opencmis-client-api:1.1.0")
    implementation("org.apache.chemistry.opencmis:chemistry-opencmis-client-impl:1.1.0")

    implementation("org.springframework.ws:spring-ws-core")
    jaxb(
            "org.glassfish.jaxb:jaxb-runtime",
            "org.glassfish.jaxb:jaxb-xjc",
            "org.glassfish.jaxb:jaxb-jxc"
    )

    testCompileOnly("org.projectlombok:lombok")
    testAnnotationProcessor("org.projectlombok:lombok")
    testImplementation("org.seleniumhq.selenium:selenium-java")
    testImplementation("de.redsix:pdfcompare:1.1.60")
    testImplementation("org.springframework.boot:spring-boot-starter-test") {
        exclude group: "org.junit.vintage", module: "junit-vintage-engine"
        exclude group: "com.vaadin.external.google", module: "android-json"
    }
    testImplementation("com.h2database:h2")
    testImplementation("org.awaitility:awaitility")
    testImplementation("com.github.tomakehurst:wiremock-standalone:2.27.2")
    testImplementation("org.mockito:mockito-inline")
    testImplementation("io.github.bonigarcia:webdrivermanager:5.0.3")
    testImplementation("org.springframework.ws:spring-ws-test")
    testImplementation("org.springframework.security:spring-security-test")
    testImplementation("io.percy:percy-java-selenium:1.0.0")
    testImplementation("com.deque.html.axe-core:selenium:4.3.1")
    testImplementation("org.jsoup:jsoup:1.14.3")
}

compileJava {
    dependsOn(generateGitProperties)
    dependsOn(genJaxbFilenet)
    inputs.files(processResources)
}

def unitTest = tasks.register("unitTest", Test) {
    Test task ->
        task.useJUnitPlatform {
            JUnitPlatformOptions options ->
                options.excludeTags("db", "documentUploadJourney", "laterDocsJourney", "fullFlowJourney", "minimumFlowJourney", "framework", "pdf", "ccap", "validation", "a11y")
        }
}

def documentUploadJourneyTest = tasks.register("documentUploadJourneyTest", Test) {
    Test task ->
        task.useJUnitPlatform {
            JUnitPlatformOptions options ->
                options.includeTags("documentUploadJourney")
        }
}

def fullFlowJourneyTest = tasks.register("fullFlowJourneyTest", Test) {
    Test task ->
        task.useJUnitPlatform {
            JUnitPlatformOptions options ->
                options.includeTags("fullFlowJourney")
        }
}

def laterDocsJourneyTest = tasks.register("laterDocsJourneyTest", Test) {
    Test task ->
        task.useJUnitPlatform {
            JUnitPlatformOptions options ->
                options.includeTags("laterDocsJourney")
        }
}

def minimumFlowJourneyTest = tasks.register("minimumFlowJourneyTest", Test) {
    Test task ->
        task.useJUnitPlatform {
            JUnitPlatformOptions options ->
                options.includeTags("minimumFlowJourney")
        }
}

def frameworkTest = tasks.register("frameworkTest", Test) {
    Test task ->
        task.useJUnitPlatform {
            JUnitPlatformOptions options ->
                options.includeTags("framework")
        }
}

def pdfTest = tasks.register("pdfTest", Test) {
    Test task ->
        task.useJUnitPlatform {
            JUnitPlatformOptions options ->
                options.includeTags("pdf")
        }
}

def dbTest = tasks.register("dbTest", Test) {
    Test task ->
        task.useJUnitPlatform {
            JUnitPlatformOptions options ->
                options.includeTags("db")
        }
}

def ccapTest = tasks.register("ccapTest", Test) {
    Test task ->
        task.useJUnitPlatform {
            JUnitPlatformOptions options ->
                options.includeTags("ccap")
        }
}

def validationTest = tasks.register("validationTest", Test) {
    Test task ->
        task.useJUnitPlatform {
            JUnitPlatformOptions options ->
                options.includeTags("validation")
        }
}

def axeAccessibilityTest = tasks.register("accessibilityTest", Test) {
    Test task ->
        task.useJUnitPlatform {
            JUnitPlatformOptions options ->
                options.includeTags("a11y")
        }
}

test {
    useJUnitPlatform {
        JUnitPlatformOptions options ->
            options.excludeTags("a11y")
    }
    dependsOn(checkLicense)
}

tasks.withType(Test).configureEach {
    Test task ->
        task.doFirst {
            file(".env.test").readLines().each() {
                def (key, value) = it.split("=", 2)
                environment(key, value)
            }
        }
        task.maxParallelForks(Runtime.runtime.availableProcessors().intdiv(2) ?: 1)
        task.testLogging {
            exceptionFormat = "full"
            events = ["failed", "skipped"]
            showStackTraces = true
            showCauses = true
            showExceptions = true
            // uncomment the following line to print stdout and stderr for every test
            // showStandardStreams = true
        }
}

licenseReport {
    allowedLicensesFile = new File("$projectDir/allowed-licenses.json")
}

jar {
    enabled = false
}
