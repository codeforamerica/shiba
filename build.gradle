plugins {
    id 'org.springframework.boot' version '2.4.4'
    id 'io.spring.dependency-management' version '1.0.11.RELEASE'
    id 'java'
    id 'com.github.jk1.dependency-license-report' version '1.16'
    id 'com.gorylenko.gradle-git-properties' version '2.3.0'
}

group = 'org.codeforamerica'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '14'

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
    developmentOnly
    runtimeClasspath {
        extendsFrom developmentOnly
    }
    jaxb
}

repositories {
    mavenCentral()
}

task genJaxb {
    ext.sourcesDir = "${buildDir}/generated-sources/jaxb"
    ext.classesDir = "${buildDir}/classes/jaxb"
    ext.schema = "src/main/resources/object-service-port.wsdl"

    outputs.dir classesDir

    doLast() {
        project.ant {
            taskdef name: "xjc", classname: "com.sun.tools.xjc.XJCTask",
                    classpath: configurations.jaxb.asPath
            mkdir(dir: sourcesDir)
            mkdir(dir: classesDir)

            xjc(destdir: sourcesDir, schema: schema,
                    package: "org.codeforamerica.shiba.esbwsdl") {
                arg(value: "-wsdl")
                produces(dir: sourcesDir, includes: "**/*.java")
            }

            javac(destdir: classesDir, source: 1.8, target: 1.8, debug: true,
                    debugLevel: "lines,vars,source",
                    classpath: configurations.jaxb.asPath) {
                src(path: sourcesDir)
                include(name: "**/*.java")
                include(name: "*.java")
            }

            copy(todir: classesDir) {
                fileset(dir: sourcesDir, erroronmissingdir: false) {
                    exclude(name: "**/*.java")
                }
            }
        }
    }
}

dependencies {
    compileOnly 'org.projectlombok:lombok'
    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    annotationProcessor 'org.projectlombok:lombok'
    annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'

    implementation 'io.sentry:sentry-spring-boot-starter:4.3.0'
    implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation('org.springframework.boot:spring-boot-starter-web-services') {
        exclude group: 'org.springframework.boot', module: 'spring-boot-starter-tomcat'
    }

    implementation 'io.awspring.cloud:spring-cloud-aws-context:2.3.0'
    implementation 'io.awspring.cloud:spring-cloud-starter-aws:2.3.0'
    implementation 'io.awspring.cloud:spring-cloud-aws-autoconfigure:2.3.0'
    implementation 'org.postgresql:postgresql'
    implementation 'org.glassfish.jaxb:jaxb-runtime'
    implementation 'org.apache.pdfbox:pdfbox:2.0.21'
    implementation 'org.apache.commons:commons-lang3'
    implementation 'org.apache.commons:commons-text:1.9'
    implementation 'org.jetbrains:annotations:20.1.0'
    implementation 'commons-validator:commons-validator:1.7'
    implementation 'org.springframework.boot:spring-boot-starter-data-jdbc'
    implementation 'org.apache.httpcomponents:httpclient'
    implementation 'io.sentry:sentry-logback:4.3.0'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'com.google.crypto.tink:tink:1.5.0'
    implementation 'org.flywaydb:flyway-core:7.7.1'
    implementation 'org.springframework.boot:spring-boot-starter-webflux'
    implementation 'com.mixpanel:mixpanel-java:1.5.0'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'com.sun.activation:jakarta.activation:1.2.2'
    implementation 'org.springframework:spring-aspects:5.3.5'
    implementation 'org.springframework.retry:spring-retry:1.3.1'
    implementation 'ch.qos.logback.contrib:logback-json-classic:0.1.5'
    implementation 'ch.qos.logback.contrib:logback-jackson:0.1.5'
    implementation 'ch.qos.logback:logback-core:1.2.0'
    implementation 'ch.qos.logback:logback-classic:1.2.3'
    implementation 'net.logstash.logback:logstash-logback-encoder:6.6'

    implementation(files(genJaxb.classesDir).builtBy(genJaxb))
    jaxb "com.sun.xml.bind:jaxb-xjc:2.3.3"

    testCompileOnly 'org.projectlombok:lombok'
    testAnnotationProcessor 'org.projectlombok:lombok'
    testImplementation 'org.seleniumhq.selenium:selenium-java:3.141.59'
    testImplementation('org.springframework.boot:spring-boot-starter-test') {
        exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
        exclude group: 'com.vaadin.external.google', module: 'android-json'
    }
    testImplementation 'org.awaitility:awaitility:4.0.3'
    testImplementation 'com.github.tomakehurst:wiremock-standalone:2.27.1'
    testImplementation 'io.github.bonigarcia:webdrivermanager:4.3.1'
    testImplementation 'org.springframework.ws:spring-ws-test'
    testImplementation 'org.springframework.security:spring-security-test'
}

compileJava.inputs.files(processResources)

def unitTest = tasks.register("unitTest", Test) {
    Test task ->
        task.useJUnitPlatform {
            JUnitPlatformOptions options ->
                options.excludeTags("db", "externalService")
        }
        task.maxParallelForks(Runtime.runtime.availableProcessors().intdiv(2) ?: 1)
}

def dbTest = tasks.register("dbTest", Test) {
    Test task ->
        task.useJUnitPlatform {
            JUnitPlatformOptions options ->
                options.includeTags 'db'
        }
        task.shouldRunAfter test
}


def testAll = tasks.register("testAll", Test) {
    Test task ->
        task.dependsOn(unitTest)
        task.dependsOn(dbTest)
}

test {
    useJUnitPlatform()
    testLogging {
        exceptionFormat = 'full'
    }
}

tasks.withType(Test).configureEach {
    Test task ->
        task.doFirst {
            def env = new File('.env')
            if (env.exists()) {
                file('.env').readLines().each() {
                    def (key, value) = it.split('=', 2)
                    environment(key, value)
                }
            }
            file('.env.test').readLines().each() {
                def (key, value) = it.split('=', 2)
                environment(key, value)
            }
        }
}

licenseReport {
    allowedLicensesFile = new File("$projectDir/allowed-licenses.json")
}

build {
    dependsOn(checkLicense)
}