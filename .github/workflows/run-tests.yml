name: Run tests

on:
  push:
    branches-ignore:
      - staging

jobs:
  unit-test:
    name: Run unit tests
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: Set up ChromeDriver
      uses: nanasess/setup-chromedriver@v1.0.1
    - name: Set up JDK
      uses: actions/setup-java@v1
      with:
        java-version: '16'
    - name: Cache Gradle packages
      uses: actions/cache@v2
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-
    - name: Grant execute permission for gradlew
      run: chmod +x gradlew
    - name: Test with Gradle
      run: ./gradlew unitTest
      env:
        S3_BUCKET: ${{ secrets.S3_TEST_BUCKET }}
        AWS_ACCESS_KEY: ${{ secrets.CLOUD_AWS_CREDENTIALS_ACCESS_KEY }}
        AWS_SECRET_KEY: ${{ secrets.CLOUD_AWS_CREDENTIALS_SECRET_KEY }}
    - name: Cleanup Gradle Cache
      run: |
        rm -f ~/.gradle/caches/modules-2/modules-2.lock
        rm -f ~/.gradle/caches/modules-2/gc.properties
  db-test:
    name: Run db tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Set up ChromeDriver
        uses: nanasess/setup-chromedriver@v1.0.1
      - name: Set up JDK
        uses: actions/setup-java@v1
        with:
          java-version: '16'
      - name: Cache Gradle packages
        uses: actions/cache@v2
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-
      - name: Grant execute permission for gradlew
        run: chmod +x gradlew
      - name: Test with Gradle
        run: ./gradlew dbTest
        env:
          S3_BUCKET: ${{ secrets.S3_TEST_BUCKET }}
          AWS_ACCESS_KEY: ${{ secrets.CLOUD_AWS_CREDENTIALS_ACCESS_KEY }}
          AWS_SECRET_KEY: ${{ secrets.CLOUD_AWS_CREDENTIALS_SECRET_KEY }}
      - name: Cleanup Gradle Cache
        run: |
          rm -f ~/.gradle/caches/modules-2/modules-2.lock
          rm -f ~/.gradle/caches/modules-2/gc.properties
  journey-test:
    name: Run journey tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Set up ChromeDriver
        uses: nanasess/setup-chromedriver@v1.0.1
      - name: Set up JDK
        uses: actions/setup-java@v1
        with:
          java-version: '16'
      - name: Cache Gradle packages
        uses: actions/cache@v2
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-
      - name: Grant execute permission for gradlew
        run: chmod +x gradlew
      - name: Test with Gradle
        run: ./gradlew journeyTest
        env:
          S3_BUCKET: ${{ secrets.S3_TEST_BUCKET }}
          AWS_ACCESS_KEY: ${{ secrets.CLOUD_AWS_CREDENTIALS_ACCESS_KEY }}
          AWS_SECRET_KEY: ${{ secrets.CLOUD_AWS_CREDENTIALS_SECRET_KEY }}
      - name: Cleanup Gradle Cache
        run: |
          rm -f ~/.gradle/caches/modules-2/modules-2.lock
          rm -f ~/.gradle/caches/modules-2/gc.properties
  pdf-test:
    name: Run pdf tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Set up ChromeDriver
        uses: nanasess/setup-chromedriver@v1.0.1
      - name: Set up JDK
        uses: actions/setup-java@v1
        with:
          java-version: '16'
      - name: Cache Gradle packages
        uses: actions/cache@v2
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-
      - name: Grant execute permission for gradlew
        run: chmod +x gradlew
      - name: Test with Gradle
        run: ./gradlew pdfTest
        env:
          S3_BUCKET: ${{ secrets.S3_TEST_BUCKET }}
          AWS_ACCESS_KEY: ${{ secrets.CLOUD_AWS_CREDENTIALS_ACCESS_KEY }}
          AWS_SECRET_KEY: ${{ secrets.CLOUD_AWS_CREDENTIALS_SECRET_KEY }}
      - name: Cleanup Gradle Cache
        run: |
          rm -f ~/.gradle/caches/modules-2/modules-2.lock
          rm -f ~/.gradle/caches/modules-2/gc.properties
  ccap-test:
    name: Run ccap tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Set up ChromeDriver
        uses: nanasess/setup-chromedriver@v1.0.1
      - name: Set up JDK
        uses: actions/setup-java@v1
        with:
          java-version: '16'
      - name: Cache Gradle packages
        uses: actions/cache@v2
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-
      - name: Grant execute permission for gradlew
        run: chmod +x gradlew
      - name: Test with Gradle
        run: ./gradlew ccapTest
        env:
          S3_BUCKET: ${{ secrets.S3_TEST_BUCKET }}
          AWS_ACCESS_KEY: ${{ secrets.CLOUD_AWS_CREDENTIALS_ACCESS_KEY }}
          AWS_SECRET_KEY: ${{ secrets.CLOUD_AWS_CREDENTIALS_SECRET_KEY }}
      - name: Cleanup Gradle Cache
        run: |
          rm -f ~/.gradle/caches/modules-2/modules-2.lock
          rm -f ~/.gradle/caches/modules-2/gc.properties
  validation-test:
    name: Run validation tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Set up ChromeDriver
        uses: nanasess/setup-chromedriver@v1.0.1
      - name: Set up JDK
        uses: actions/setup-java@v1
        with:
          java-version: '16'
      - name: Cache Gradle packages
        uses: actions/cache@v2
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-
      - name: Grant execute permission for gradlew
        run: chmod +x gradlew
      - name: Test with Gradle
        run: ./gradlew validationTest
        env:
          S3_BUCKET: ${{ secrets.S3_TEST_BUCKET }}
          AWS_ACCESS_KEY: ${{ secrets.CLOUD_AWS_CREDENTIALS_ACCESS_KEY }}
          AWS_SECRET_KEY: ${{ secrets.CLOUD_AWS_CREDENTIALS_SECRET_KEY }}
      - name: Cleanup Gradle Cache
        run: |
          rm -f ~/.gradle/caches/modules-2/modules-2.lock
          rm -f ~/.gradle/caches/modules-2/gc.properties
  document-test:
    name: Run document tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Set up ChromeDriver
        uses: nanasess/setup-chromedriver@v1.0.1
      - name: Set up JDK
        uses: actions/setup-java@v1
        with:
          java-version: '16'
      - name: Cache Gradle packages
        uses: actions/cache@v2
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-
      - name: Grant execute permission for gradlew
        run: chmod +x gradlew
      - name: Test with Gradle
        run: ./gradlew documentTest
        env:
          S3_BUCKET: ${{ secrets.S3_TEST_BUCKET }}
          AWS_ACCESS_KEY: ${{ secrets.CLOUD_AWS_CREDENTIALS_ACCESS_KEY }}
          AWS_SECRET_KEY: ${{ secrets.CLOUD_AWS_CREDENTIALS_SECRET_KEY }}
      - name: Cleanup Gradle Cache
        run: |
          rm -f ~/.gradle/caches/modules-2/modules-2.lock
          rm -f ~/.gradle/caches/modules-2/gc.properties
  upload-pr-number-for-dependabot-merge:
    name: Upload PR Number for Dependabot Automerge
    runs-on: ubuntu-latest
#    needs: [unit-test, db-test, journey-test, pdf-test, ccap-test, validation-test, document-test]
#    if: ${{ github.actor == 'dependabot[bot]' }}
    steps:
      - name: Save PR Info for Merge Action
        run: |
          echo "PR_HEADSHA=${{ github.event.pull_request.head.sha }}" >> pr.env
          echo "PR_NUMBER=${{ github.event.pull_request.number }}"    >> pr.env
          echo "PR_TITLE=${{ github.event.pull_request.title }}"      >> pr.env
      - name: Upload Artifact
        uses: actions/upload-artifact@v2
        with:
          name: pr-metadata
          path: pr.env
          retention-days: 1
