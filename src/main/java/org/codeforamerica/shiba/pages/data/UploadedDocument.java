package org.codeforamerica.shiba.pages.data;

import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.ToString;
import lombok.extern.slf4j.Slf4j;
import org.apache.pdfbox.multipdf.PDFMergerUtility;
import org.apache.pdfbox.pdmodel.PDDocument;
import org.apache.pdfbox.pdmodel.PDPage;
import org.apache.pdfbox.pdmodel.PDPageContentStream;
import org.apache.pdfbox.pdmodel.common.PDRectangle;
import org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject;
import org.codeforamerica.shiba.Utils;
import org.codeforamerica.shiba.application.Application;
import org.codeforamerica.shiba.documents.DocumentRepositoryService;
import org.codeforamerica.shiba.output.ApplicationFile;
import org.codeforamerica.shiba.output.caf.FileNameGenerator;
import org.codeforamerica.shiba.output.pdf.PdfGenerator;

import java.io.ByteArrayOutputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.Serializable;
import java.util.List;

import static org.codeforamerica.shiba.output.Document.UPLOADED_DOC;
import static org.codeforamerica.shiba.output.Recipient.CASEWORKER;

@AllArgsConstructor
@Data
@Slf4j
@ToString(exclude = {"dataURL"})
public class UploadedDocument implements Serializable {
    private static final List<String> IMAGE_TYPES_TO_CONVERT_TO_PDF = List.of("jpg", "jpeg", "png", "gif");

    private String filename;
    private String s3Filepath;
    private String dataURL; // thumbnail image as a string, generated by dropzone
    private String type;
    private long size;

    // TODO move this out of the data class
    public ApplicationFile fileToSend(Application application,
                                      Integer index,
                                      DocumentRepositoryService documentRepositoryService,
                                      FileNameGenerator fileNameGenerator,
                                      PdfGenerator pdfGenerator) {
        var fileBytes = documentRepositoryService.get(getS3Filepath());
        var extension = Utils.getFileType(getFilename());
        if (IMAGE_TYPES_TO_CONVERT_TO_PDF.contains(extension)) {
            try {
                fileBytes = convertImageToPdf(fileBytes);
                extension = "pdf";
            } catch (IOException e) {
                log.error("failed to convert document " + getFilename() + " to pdf. Maintaining original type");
            }
        }

        ApplicationFile coverPageApplicationFile = pdfGenerator.generate(application.getId(), UPLOADED_DOC, CASEWORKER);
        if (extension.equals("pdf")) {
            fileBytes = addCoverPageToPdf(fileBytes, coverPageApplicationFile);
        }

        String filename = fileNameGenerator.generateUploadedDocumentName(application, index, extension);

//        writeByteArrayToFile(fileBytes, filename);
        return new ApplicationFile(fileBytes, filename);
    }

    private byte[] addCoverPageToPdf(byte[] fileBytes, ApplicationFile coverPageApplicationFile) {
        PDFMergerUtility merger = new PDFMergerUtility();
        try (PDDocument coverPageDoc = PDDocument.load(coverPageApplicationFile.getFileBytes());
             PDDocument uploadedDoc = PDDocument.load(fileBytes);
             ByteArrayOutputStream outputStream = new ByteArrayOutputStream()) {

            merger.appendDocument(coverPageDoc, uploadedDoc);
            coverPageDoc.save(outputStream);
            fileBytes = outputStream.toByteArray(); // we did it! close everything
        } catch (IOException e) {
            throw new RuntimeException(e);
        }
        return fileBytes;
    }

    private void writeByteArrayToFile(byte[] fileBytes, String filename) {
        try (FileOutputStream fos = new FileOutputStream(filename)) {
            fos.write(fileBytes);
        } catch (IOException e) {
            log.error("Failed to close FileOutputStream");
        }
    }

    private byte[] convertImageToPdf(byte[] imageFileBytes) throws IOException {
        try (PDDocument doc = new PDDocument(); ByteArrayOutputStream outputStream = new ByteArrayOutputStream()) {
            var image = PDImageXObject.createFromByteArray(doc, imageFileBytes, this.getFilename());
            // Figure out page size
            var pageSize = PDRectangle.LETTER;
            var originalWidth = image.getWidth();
            var originalHeight = image.getHeight();
            var pageWidth = pageSize.getWidth();
            var pageHeight = pageSize.getHeight();
            var ratio = Math.min(pageWidth / originalWidth, pageHeight / originalHeight);
            var scaledWidth = originalWidth * ratio;
            var scaledHeight = originalHeight * ratio;
            var x = (pageWidth - scaledWidth) / 2;
            var y = (pageHeight - scaledHeight) / 2;

            var imagePage = new PDPage(pageSize);
            // Add a page of the right size to the PDF
            doc.addPage(imagePage);

            // Write the image into the PDF
            try (PDPageContentStream pdfContents = new PDPageContentStream(doc, imagePage)) {
                pdfContents.drawImage(image, x, y, scaledWidth, scaledHeight);
            }

            // Add the cover page

            // put the doc in a byte array
            doc.save(outputStream);
            return outputStream.toByteArray();
        }
    }
}
